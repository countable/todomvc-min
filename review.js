// Generated by CoffeeScript 1.8.0
(function() {
  var $doc, base_view, get_classes, get_closest_view, namespace, timeout;

  if (typeof window !== 'undefined') {
    namespace = window.review = {};
  } else {
    namespace = module.exports;
  }

  namespace.deferred = [];

  $doc = $(document);

  window.view_registry = {};

  get_classes = function(node) {
    var classes;
    if (node.className) {
      classes = node.className.split(' ');
    } else {
      classes = [];
    }
    if (node.name) {
      classes.push(node.name);
    }
    if (node.id) {
      classes.push(node.id);
    }
    return classes;
  };

  get_closest_view = function(el, root) {
    var $root, c, view_instance, _i, _len, _ref;
    if (root) {
      $root = $(el);
      if (!$root.is(root)) {
        $root = $root.parents(root);
      }
    } else {
      while (el) {
        _ref = get_classes(el);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (view_registry['.' + c]) {
            root = '.' + c;
            $root = $(el);
            break;
          }
        }
        el = el.parentNode;
      }
    }
    if (!($root && $root.length)) {
      return null;
    }
    view_instance = $root.data('view');
    if (!view_instance) {
      if (view_instance == null) {
        view_instance = {
          $: $root,
          item: $root.data('item')
        };
      }
      view_instance.__proto__ = view_registry[root];
      $root.data('view', view_instance);
    }
    return view_instance;
  };

  namespace.view = function(root, opts) {
    var delegate;
    opts.__proto__ = base_view;
    opts.get_all = function() {
      return $(root);
    };
    delegate = function(specifier_raw, handler) {
      var event_type, selectors, specifier, specifiers, tokens, _i, _len;
      specifiers = specifier_raw.split(',');
      for (_i = 0, _len = specifiers.length; _i < _len; _i++) {
        specifier = specifiers[_i];
        tokens = specifier.split(' ');
        event_type = tokens[0];
        selectors = [root].concat(tokens.slice(1)).join(' ');
        if ('string' === typeof handler) {
          handler = opts[handler];
        }
      }
      return $doc.on(event_type, selectors, function(e) {
        var result, view_instance;
        view_instance = get_closest_view(this, root);
        result = handler.call(view_instance, e);
        if (result !== false) {
          return typeof view_instance.sync === "function" ? view_instance.sync() : void 0;
        }
      });
    };
    $.each(opts.events, delegate);
    view_registry[root] = opts;
    return opts;
  };

  timeout = void 0;

  base_view = {
    parent: function() {
      var node;
      node = this.$.parent().get(0);
      while (node) {
        if ($(node).data('view')) {
          return $(node).data('view');
        }
        node = node.parentNode;
      }
      return null;
    },
    print: function() {
      var s, x;
      x = this.depth;
      s = '';
      while (x) {
        x -= 1;
        s += '-> ';
      }
      return console.log(s, arguments);
    },
    defer: function(fn) {
      console.log('deferring');
      return review.deferred.push(fn);
    },
    syncTerminal: function(node, value) {
      if (node.tagName === 'INPUT') {
        if (node.type === 'checkbox') {
          return node.checked = !!value;
        } else {
          return node.value = value;
        }
      } else {
        return node.innerText = value;
      }
    },
    syncArray: function(parent_node, match) {
      var i, ii, item, item_idx, item_node, last_ii, node, node_idx, node_item, num_children, tpl_node, _results;
      tpl_node = parent_node.lastElementChild;
      tpl_node.style.display = 'none';
      node = parent_node.firstElementChild;
      item_node = {};
      node_item = {};
      i = 0;
      ii = 0;
      last_ii = 0;
      num_children = parent_node.children.length;
      while (i < match.length) {
        ii = last_ii;
        while (ii < num_children - 1) {
          if (match[i] === $(parent_node.children[ii]).data('item')) {
            item_node[i] = ii;
            node_item[ii] = i;
            last_ii = ii;
            break;
          }
          ii += 1;
        }
        i += 1;
      }
      for (item_idx in item_node) {
        node_idx = item_node[item_idx];
        this.syncObject(parent_node.children[node_idx], match[item_idx], false);
      }
      i = num_children - 1;
      while (i) {
        i -= 1;
        if (node_item[i] === void 0) {
          parent_node.removeChild(parent_node.children[i]);
        }
      }
      item_idx = 0;
      _results = [];
      while (item_idx < match.length) {
        if (item_node[item_idx] === void 0) {
          item = match[item_idx];
          node = tpl_node.cloneNode(true);
          node.style.display = '';
          tpl_node.parentNode.insertBefore(node, parent_node.children[item_idx]);
          $(node).data('item', item);
          this.syncObject(node, item, false);
        }
        _results.push(item_idx += 1);
      }
      return _results;
    },
    depth: 0,
    sync: function() {
      if (!timeout) {
        return timeout = setTimeout((function(_this) {
          return function() {
            console.log('syncing...');
            timeout = null;
            return _this.redraw();
          };
        })(this), 25);
      }
    },
    redraw: function() {
      var _results;
      if (this.onredraw) {
        this.onredraw();
      } else {
        this.syncRoot(this.$.data('item'));
      }
      _results = [];
      while (review.deferred.length) {
        _results.push(review.deferred.pop()());
      }
      return _results;
    },
    syncRoot: function(data) {
      this._cache = {};
      this.$.data('item', data);
      this.syncObject(this.$.get(0), data, true);
      return typeof this.afterSync === "function" ? this.afterSync(data) : void 0;
    },
    scope: function(marker) {
      var _base;
      if (this[marker]) {
        return (_base = this._cache)[marker] != null ? _base[marker] : _base[marker] = this[marker]();
      } else {
        return null;
      }
    },
    syncObject: function(node, data, skip) {
      var c, child_view, classes, match, match_type, _i, _len;
      if (skip == null) {
        skip = false;
      }
      this.depth += 1;
      if (data === void 0) {
        this.depth -= 1;
        return;
      }
      if (!skip) {
        classes = get_classes(node);
        for (_i = 0, _len = classes.length; _i < _len; _i++) {
          c = classes[_i];
          if (view_registry['.' + c]) {
            child_view = get_closest_view(node, '.' + c);
            child_view.syncRoot(data);
            this.depth -= 1;
            return;
          }
          if (data[c] !== void 0) {
            match = data[c];
            break;
          }
          if (this[c]) {
            match = this.scope(c);
          }
        }
      }
      match_type = typeof match;
      if (match_type !== 'undefined') {
        if (match_type === 'string' || match_type === 'boolean' || match_type === 'number') {
          this.syncTerminal(node, match);
          this.depth -= 1;
          return;
        } else if (match instanceof Array) {
          this.syncArray(node, match);
          this.depth -= 1;
          return;
        } else if (match_type === 'object') {
          data = match;
          $(node).data('item', match);
        } else if (match_type === 'function') {
          data = match(node);
        }
      }
      node = node.firstElementChild;
      while (node) {
        this.syncObject(node, data);
        node = node.nextElementSibling;
      }
      return this.depth -= 1;
    }
  };

  namespace.init = function(node, data) {
    return (get_closest_view(node)).syncRoot(data);
  };

}).call(this);

//# sourceMappingURL=review.js.map
